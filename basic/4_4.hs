-- case式以外でのパターンマッチ
-- 変数を定義する様々な箇所でパターンマッチを利用できる。


main :: IO()
main = do
 putStrLn("■関数定義におけるパターンマッチ")
 print $ f(11, True)
 f2(19)
 print $ f3(1,2) 3
 
 putStrLn("■変数定義におけるパターンマッチ")
 let(x, y) = 22 `divMod` 5
 print x
 print y

-- 以下関数

-- caseを使わずにパターンを書くことが可能。
-- 関数定義でパターンを複数使う場合は、パターンだけではなく関数全体を繰り返し記述する。
f(x1, True) |(q, 0) <- x1 `divMod` 2 = q
f(x1, _   )                          = x1

-- ガード部分が複数個ある場合については関数名やパターンを重複して書く必要ない。
f2(n) |n `mod` 2 == 0 = putStrLn"even"
      |otherwise      = putStrLn"odd"

-- ラムダ式でも引数にパターンは使えるが、複数のパターンにマッチさせたり、ガード節を使ったりはできない。
f3 = \(x, y) z -> x + y + z