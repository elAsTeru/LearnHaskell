# Haskellの特徴


## 参照透過性
- 関数の結果が同じ値となる式に対して読んだとき、必ず同じ結果になる性質。
2乗する関数に2を渡したら必ず4が返ってくる。変数の中身が4に入れ替わり再実行で4の2乗は16のようなことがない
- 関数が状態を持たないことを保証。状態を持たない数学的な関数は、並列処理を実行するのに適している。

## ラムダ計算
- コンピュータの計算をモデル化した体形の1つ

## 静的型付け
- プログラム内の変数や関数の引数・返り値について、型をプログラムの実行前に全て決める事

## 純粋性
- すべての関数が参照透過性を持つような関数型プログラミング言語
- すべてのk変数がイミュータブル、代入による変更が不可 

## 型推論
- プログラマが変数などの型を明示する必要がない。 

## 遅延評価
- 『f(1/x)』という関数があったときに、通常の言語では『1/x』の結果を引数として『f』関数を実行するのに対し、
Haskellでは『1/x』が計算されずに『f』に渡され、実際に引数を使うときまで『1/x』の計算が遅延される。