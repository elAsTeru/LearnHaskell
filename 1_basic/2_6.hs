-- 中置演算子

main :: IO()
main = do
-- 中置演算子
 print ((-) 5 4) -- 5-4と同義
 print (8 .+. 6)
 print (8 `add` 6)
-- セクション
 print (incr 10)
 print (decr 10)

-- 加算関数
add x y = x + y :: Int
(.+.) x y = add x y

-- セクション
-- (第一引数　中置演算子)という書式。第一引数と第二引数に対して直感的な書き方で部分適応できる。
incr = (1 +)

-- ただし第二引数の適応の書式に限るので、演算子-だけでは利用不可
-- decr = (- 1) -- セクションとして認められない
-- -に第二引数を適応したい場合はsubtract関数を使って表現する。
decr = subtract 1

-- 中置演算子のまとめ
- incr x = 1 + x      -- 関数定義
- incr = \x -> 1 + x  -- ラムダ式
- incr = (+) 1        -- 部分適応
- incr = add 1        -- 部分適応
- incr = (1 +)        -- セクション
- incr = (1 `add`)    -- セクション
-- 以下は全て同値の定義。第二引数への適応は通常の関数適応では書けない
- incr' x = x + 1       -- 関数定義
- incr' = \x -> x + 1   -- ラムダ式
- incr' = \x -> add x 1 -- ラムダ式
- incr' = (+ 1)         -- セクション
- incr' = (`add` 1)     -- セクション

-- 中置以外の演算子
-- Haskellの単項演算子は、数値の前に指定して負の数を作る(符号反転)-のみ。
-- また、3項以上の演算子はないので、見たことのない演算子に出会った場合。全て２項の中置演算子と覚えておく。